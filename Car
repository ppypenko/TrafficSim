package edu.csc150;

import java.util.ArrayList;
import java.util.Random;
import greenfoot.Actor;

public class Car extends Actor implements IntFace {
	
	private boolean check = false, touch = false;
	protected boolean crash = false;
	private static final int EXP1 = 6, EXP2 = 12, EXP3 = 18, EXP4 = 24,START = 0, RIGHT = 0, DOWN = 90, LEFT = 180, UP = 270, GREEN = 1, YELLOW = 2, RED = 3 ,SLOW = 15, STOP = 5;
	Random mixer = new Random();
	protected int exp=0, num, move = 2;
	private int oldTurn, count = 0, sumX, sumY, sum, bestX, bestY;
	protected double node;
	protected String COLOR;
	Intersection intersection = null;
	ArrayList<Intersection> crossWay = new ArrayList<Intersection>();
	static String[] car = {"images/topCarPurple.png", "images/topCarRed.png", "images/topCarBlue.png", "images/topCarYellow.png"};
	static String[] boom = {"images/explosion1.png", "images/explosion2.png", "images/explosion3.png"};
	
	public Car(Direction r, double n){	
		this.node = n;
		num = mixer.nextInt(4);
		this.setImage(car[num]);
		setRotation(r.GetRotation());
		switch(num){
		case 0:
			COLOR = "PURPLE";
			break;
		case 1:
			COLOR = "RED";
			break;
		case 2:
			COLOR = "BLUE";
			break;
		case 3:
			COLOR = "YELLOW";
			break;
		}
	}
	public void act(){
		move(move);
		moveCar();	
		checkIntersection();
		removeOrCrash();
		
	}
	@SuppressWarnings("unchecked")
	private Dest findDest() {
		Dest Dest = null;
		ArrayList<Dest> dest = (ArrayList<Dest>) getObjectsInRange(1500, Dest.class);
		for(Dest d : dest){
			if(d.getNum() == this.node){
				Dest = d;
			}
		}
		return Dest;
	}
	private void getIntersection(Intersection i) {
		Dest d = findDest();
		if(d == null){
			System.out.println("null");
		}
		Intersection c = findPath(i, d);
		crossWay.clear();
		sumX = getSum(i.getX(), d.getX());
		sumY = getSum(i.getY(), d.getY());
		if(sumX > 30){
			if(c.getX()+10 > this.getX()){
				if(this.getRotation() == DOWN && this.getY() == i.getY()+15){
					this.setRotation(RIGHT);
				}
				else if(this.getRotation() == LEFT && this.getX() == i.getX()+15){
					this.setRotation(UP);
				}
				else if(this.getRotation() == UP && this.getY() == i.getY()+15){
					this.setRotation(RIGHT);
				}
			}else if(c.getX() < this.getX()){
				if(this.getRotation() == RIGHT && this.getX() == i.getX()-15){
					this.setRotation(DOWN);
				}
				else if(this.getRotation() == DOWN && this.getY() == i.getY()-15){
					this.setRotation(LEFT);
				}
				else if(this.getRotation() == UP && this.getY() == i.getY()-15){
					this.setRotation(LEFT);
				}
			}
		}else if(sumY > 30){
			if(c.getY() > this.getY()){
				if(this.getRotation() == RIGHT && this.getX() == i.getX()-15){
					this.setRotation(DOWN);
				}
				else if(this.getRotation() == LEFT && this.getX() == i.getX()-15){
					this.setRotation(DOWN);
				}
				else if(this.getRotation() == UP && this.getY() == i.getY()+15){
					this.setRotation(RIGHT);
				}
			}else if(c.getY() < this.getY()){
				if(this.getRotation() == RIGHT && this.getX() == i.getX()+15){
					this.setRotation(UP);
				}
				else if(this.getRotation() == LEFT && this.getX() == i.getX()+15){
					this.setRotation(UP);
				}
				else if(this.getRotation() == DOWN && this.getY() == i.getY()-15){
					this.setRotation(LEFT);
				}
			}
		}
	}
	@SuppressWarnings("unchecked")
	public Intersection findPath(Intersection c, Dest d){
		bestX = getSum(d.getX(), this.getX());
		bestY = getSum(d.getY(), this.getY());
		sumX = getSum(c.getX(), d.getX());
		sumY = getSum(c.getY(), d.getY());
		if(sumX <= 30 || sumY <= 30){
			intersection = c;
		}else{
			ArrayList<Intersection> intersections = (ArrayList<Intersection>) getObjectsInRange(300, Intersection.class);
			for(Intersection i : intersections){
				if(!crossWay.contains(i)){
					crossWay.add(i);
					intersection = findPath(i, d);
				}
			}
		}
		if(intersection == null){
			intersection = c;
		}
		return intersection;
	}
	private int getSum(int a, int b) {
		if(a > b){
			sum = a - b;
		}else{
			sum = b - a;
		}
		return sum;
	}
	@SuppressWarnings("unchecked")
	private void foundDest() {
		ArrayList<Dest> dest = (ArrayList<Dest>) getObjectsInRange(20, Dest.class);
		for(Dest d : dest){
			if(d.getNum() == this.node){
				System.out.println("Reached Destination.");
				getWorld().removeObject(d);
				getWorld().removeObject(this);
			}
		}
	}
	public boolean getTouch(){
		if(this.isTouching(Intersection.class) && count == 0){
			touch = true;
			count++;
		}else if(!this.isTouching(Intersection.class) && count != 0){
			touch = false;
			count = 0;
		}else{
			touch = false;
		}
		return touch;
	}
	public String getColor(){
		return COLOR;
	}
	protected void removeOrCrash() {
		if(crash){
			exp++;
		}
		if(isAtEdge()){
			newLocation();
			//getWorld().removeObject(this);
		}else{
			hasCrash();
		}
		if(!crash && !isAtEdge()){
			foundDest();
		}
	}	
	protected void checkIntersection() {	
		if(isTouching(Intersection.class) && !crash){
			Intersection i = (Intersection) getOneIntersectingObject(Intersection.class);
			getIntersection(i);
		}
	}
	protected void turnLeft(Actor i) {		
		oldTurn = this.getRotation();
		if(this.getRotation() == RIGHT && this.getX() == i.getX()+15){
			this.setRotation(UP);
		}
		else if(this.getRotation() == DOWN && this.getY() == i.getY()+15){
			this.setRotation(RIGHT);
		}
		else if(this.getRotation() == LEFT && this.getX() == i.getX()-15){
			this.setRotation(DOWN);
		}
		else if(this.getRotation() == UP && this.getY() == i.getY()-15){
			this.setRotation(LEFT);
		}
		assert (oldTurn != this.getRotation() || this.getRotation() != oldTurn + 180 || this.getRotation() != oldTurn - 180);
	}
	protected void turnRight(Actor i) {	
		oldTurn = this.getRotation();
		if(this.getRotation() == RIGHT && this.getX() == i.getX()-15){
			this.setRotation(DOWN);
		}
		else if(this.getRotation() == DOWN && this.getY() == i.getY()-15){
			this.setRotation(LEFT);
		}
		else if(this.getRotation() == LEFT && this.getX() == i.getX()+15){
			this.setRotation(UP);
		}
		else if(this.getRotation() == UP && this.getY() == i.getY()+15){
			this.setRotation(RIGHT);
		}
		assert (oldTurn != this.getRotation() || this.getRotation() != oldTurn + 180 || this.getRotation() != oldTurn - 180);
	}
	@SuppressWarnings("unchecked")
	protected void moveCar() {
		if(check){
			ArrayList<TrafficLight> light = (ArrayList<TrafficLight>) getObjectsInRange(30, TrafficLight.class);
			for(TrafficLight l : light){
				if(this.getRotation() == RIGHT && l.getRotation() == LEFT){
					if(l.getColor() == RED && !isTouching(Intersection.class)){
						if(this.getX() <= l.getX()-STOP){
							move = 0;								
						}
						else{
							move = 2;
						}
					}else if(l.getColor() == YELLOW && this.getIntersectingObjects(Intersection.class) == null){
						if(this.getX() <= l.getX()-SLOW){
							move = 1;
						}
						else{
							move = 2;
						}
					}else if(l.getColor() == GREEN){
						move = 2;
					}
				}else if(this.getRotation() == LEFT && l.getRotation() == RIGHT){
					if(l.getColor() == RED && !isTouching(Intersection.class)){
						if(this.getX() >= l.getX()+STOP){
							move = 0;
						}
						else{
							move = 2;
						}
					}else if(l.getColor() == YELLOW && this.getIntersectingObjects(Intersection.class) == null){
						if(this.getX() >= l.getX()+SLOW){
							move = 1;
						}
						else{
							move = 2;
						}
					}else if(l.getColor() == GREEN){
						move = 2;
					}
				}else if(this.getRotation() == DOWN && l.getRotation() == UP){
					if(l.getColor() == RED && !isTouching(Intersection.class)){
						if(this.getY() <= l.getY()-STOP){
							move = 0;
						}
						else{
							move = 2;
						}
					}else if(l.getColor() == YELLOW && this.getIntersectingObjects(Intersection.class) == null){
						if(this.getY() <= l.getY()-SLOW){
							move = 1;
						}
						else{
							move = 2;
						}
					}else if(l.getColor() == GREEN){
						move = 2;
					}
				}else if(this.getRotation() == UP && l.getRotation() == DOWN){
					if(l.getColor() == RED && !isTouching(Intersection.class)){
						if(this.getY() >= l.getY()+STOP){
							move = 0;
						}
						else{
							move = 2;
						}
					}else if(l.getColor() == YELLOW && this.getIntersectingObjects(Intersection.class) == null){
						if(this.getY() >= l.getY()+SLOW){
							move = 1;
						}
						else{
							move = 2;
						}
					}else if(l.getColor() == GREEN){
						move = 2;
					}
				}					
			}
		}		
	}
	@Override
	public void setMove(boolean notify){
			check = notify;	
	}
	protected void newLocation() {
		if(isAtEdge() && getX() == getWorld().getWidth() - 1){
			setLocation(1, getY());;
		}
		else if (isAtEdge() && getX() == 0){
			setLocation(getWorld().getWidth(), getY());
		}
		else if (isAtEdge() && getY() == getWorld().getHeight() - 1){
			setLocation(getX(), 1);
		}
		else if (isAtEdge() && getY() == 0){
			setLocation(getX(), getWorld().getHeight());
		}
	}
	public static void carCollision() throws Exception {
		try{
			throw new Error("Cars collided.");
		}
		catch(Error e){
			//e.printStackTrace();
		}
	}
	public void hasCrash() {
		Car b = (Car) getOneIntersectingObject(Car.class); 
		if(!isAtEdge() && b != null || crash )  
		{  
			if(exp == START){
				try {
					carCollision();
				} catch (Exception e) {
					//e.printStackTrace();
				} finally{
					System.out.println("Boom!");
				}
			}			
			move = 0;
			crash = true;
			if(exp == EXP1){
				ArrayList<Dest> dest = (ArrayList<Dest>) getObjectsInRange(20, Dest.class);
				for(Dest d : dest){
					if(d.getNum() == this.node){
						getWorld().removeObject(d);
					}
				}
				this.setImage(boom[0]);
			}
			else if(exp == EXP2){
				this.setImage(boom[1]);
			}
			else if(exp == EXP3){
				this.setImage(boom[2]);
			}
			else if(exp == EXP4){
				getWorld().removeObject(b);
				getWorld().removeObject(this);
			}
		} 		
	}
	public void setCrash(boolean smash){
		crash = smash;
	}	
	public int getM(){
		return move;
	}	
}
